#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <boost/multi_array.hpp>
/*
template <typename T>
std::ostream& operator << (std::ostream& out, const std::vector<T>& v){
  out<<"[";
  size_t last = v.size() - 1;
  for(size_t i = 0; i < v.size(); ++i){
    out << v[i];
    if(i != last)
      out << ", ";
    
  }
  out<<"]";
  return out;
  
}
*/
template <typename T>
class NumericList
{
public:   
  NumericList(const std::vector<T>& newNumbers) :
    m_numbers(newNumbers)
  { }
  
  const std::vector <T>&  getNumConst() const { return this->m_numbers;};
  const double getMean(){ return calcMean();};
  const double getSD(){ return calcSD();}; 
  
private:
  std::vector<T> m_numbers = { };

  double calcMean() const {
    if (!m_numbers.empty()) {
      double sum  = std::accumulate(m_numbers.begin(), m_numbers.end(), 0.0);
      return  sum / m_numbers.size();
    } else {
      return 0.0;
    }
  }

  double calcSD() const {
    if (!m_numbers.empty()) {
      double square_sum = std::inner_product(m_numbers.begin, m_numbers.end, m_numbers.begin(), 0.0);
      return std::sqrt(square_sum/m_numbers.size() - (m_numbers.calcMean())^2);
    } else {
      return 0.0;
    }
  }
  
};


template <typename T>
class Hist2D
{
private:
  typedef boost::multi_array<T, 2> array_type;
  Hist2D();
  
public:
  array_type m_matrixCount;

  Hist2D(int width, int height) :
    m_matrixCount(boost::extents[width][height])
  {
    std::fill(m_matrixCount.origin(), m_matrixCount.origin() + m_matrixCount.size(), 0);
  }

  void addToList(const NumericList<T>& numList) {
    std::vector<T>& toAdd = numList.getNumConst();
    int i = 1;
    
    for (auto it = toAdd.begin(); it != toAdd.end(); ++it) {
      m_matrixCount[i][*it] +=1;
      i++;
    }
  }
};


template <typename T>
std::ostream& operator << (std::ostream& out, NumericList <T> const &numList){
  out << std::endl << numList.getNumConst();
  return out; 
}


template <typename T>
void print(std::ostream& os, const Hist2D<T>& h2d) {
  std::copy(h2d.m_matrixCount.data(), h2d.m_matrixCount.data() +  h2d.m_matrixCount.num_elements(),
	    std::ostream_iterator<T>(std::cout, ","));
  
}

template <typename T>
void print(std::ostream& os, const std::vector<T>& v) {
  std::copy(v.begin(), v.end(),
	    std::ostream_iterator<T>(std::cout, ","));
}


int main()
{

  std::ifstream infile("filetest.txt");
  //  std::ifstream infile("test.tsv");

  std::string output;
  std::string line;

  std::vector<std::vector<int> > vec;

  while(std::getline(infile, line))
    {
      std::vector<int> subvec;
      int i;
      std::istringstream iss(line);
      std::vector<int> stringvec;
      while(iss >> i)
	{

	  std::cout<<i<<std::endl;

	  
	  subvec.push_back(i);
	  if(iss.peek()==','|| iss.peek()== ' ')
	    iss.ignore();	  
	}

      NumericList<int> l1(subvec);
      std::cout << l1.getMean() << std::endl;
    }

  Hist2D<int> h2d(2, 2);
  h2d.m_matrixCount[1][1] += 1;
  print(std::cout, h2d);

  std::vector<int> test;
  test.push_back(11);
  test.push_back(11);
  test.push_back(11);
  test.push_back(11);
  std::cout << std::endl  << std::endl  << std::endl  << std::endl ; 
  print(std::cout, test);

  std::vector<std::string> teststringA;
  teststringA.push_back("aileen");
  teststringA.push_back("aileen");
  teststringA.push_back("aileen");
  teststringA.push_back("aileen");
  print(std::cout, teststringA);
}
